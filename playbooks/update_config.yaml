---
# PLAYBOOK: ydb_platform.ydb.update_config
# PROPOSE : This playbook is designed for updating configs and restarting cluster
#           
# EXAMPLE:
#
# Update and restart all nodes
#   ansible-playbook ydb_platform.ydb.update_config
#
# Only update configs on all nodes 
#   ansible-playbook ydb_platform.ydb.update_config -t no_restart
#
# Update and restart all nodes with FORCE mode
#   ansible-playbook ydb_platform.ydb.update_config --extra-vars "availability_mode=force"

- name: Check if required variables are defined
  hosts: "{{ ansible_play_hosts | default('ydb') }}"

  tasks:

  - ansible.builtin.assert:
      that:
        - "{{ item.var1 is defined or item.var2 is defined }}"
      fail_msg: "Either {{ item.var1 }} or {{ item.var2 }} variable is required"
    loop:
      - { var1: "ydb_storage_node_cores", var2: "ydb_cores_static" }
      - { var1: "ydb_database_node_cores", var2: "ydb_cores_dynamic" }
  tags:
    - storage
    - static
    - database
    - dynamic
    - no_restart
    - always

- name: Load presettings
  hosts: "{{ ansible_play_hosts | default('ydb') }}"
  roles:
  - role: preflight
  tasks:
  - name: get ydb version if not defined
    shell: "{{ ydb_dir }}/release/archive/bin/ydbd --compatibility-info | awk '$1 ~ \"Version:\" { gsub(/-/, \".\", $2); print $2 }'"
    register: cmd_version
    run_once: true
    when: ydb_version is not defined
  - name: set ydb_version from detected version
    set_fact:
      ydb_version: "{{ cmd_version.stdout }}"
    run_once: true
    when: ydb_version is not defined
  - name: set ydb_config_v2 based on version if not explicitly set
    set_fact:
      ydb_config_v2: "{{ ydb_config_v2 | default(ydb_version is defined and ydb_version is version('25.0', '>=')) }}"
    run_once: true
  tags:
    - storage
    - static
    - database
    - dynamic
    - no_restart
    - always

- name: Update configs
  hosts: "{{ ansible_play_hosts | default('ydb') }}"
  become: true
  become_method: sudo
  become_user: root
  vars:
    ydb_storage_update_config: False

  tasks:
  - name: get ydb token for cluster config management
    ydb_platform.ydb.get_token:
      ydb_bin: "{{ ydb_dir }}/bin/ydb"
      ld_library_path: "{{ ydb_dir }}/lib"
      ca_file: "{{ ydb_dir }}/certs/ca.crt"
      endpoint: "grpcs://{{ ydb_front | default(inventory_hostname) }}:2135"
      database: "/{{ ydb_domain }}"
      user: "{{ ydb_user }}"
      password: "{{ ydb_password }}"
      retry_on_ssl_error: true
    run_once: true
    register: ydb_credentials
    until: "'token' in ydb_credentials"
    retries: 30
    delay: 15
    when: ydb_config_v2 | default(false) or ydb_storage_update_config|bool
    become: true
    become_method: sudo
    become_user: ydb
    tags:
      - storage
      - static
      - database
      - dynamic
      - no_restart

  - name: init YDB storage if not initialized
    ydb_platform.ydb.init_storage:
      config_file: "{{ ydb_dir }}/cfg/ydbd-config-static.yaml"
      ydbd_bin: "{{ ydb_dir }}/bin/ydbd"
      ca_file: "{{ ydb_dir }}/certs/ca.crt"
      endpoint: "grpcs://{{ ydb_front | default(inventory_hostname) }}:2135"
      token: "{{ ydb_credentials.token }}"
      update_config: "{{ ydb_storage_update_config }}"
    register: init_storage
    run_once: true
    when: ydb_storage_update_config|bool and ydb_config_v2|bool != True
    tags:
      - storage
      - static
      - no_restart

  - name: generate random temporary config file path
    set_fact:
      ydb_temp_config_path: "/tmp/ydbd-config-{{ ansible_date_time.epoch }}-{{ 999999 | random }}.yaml"
    run_once: true
    when: ydb_config_v2 | default(false)
    tags:
      - storage
      - static
      - database
      - dynamic
      - no_restart

  - name: V2 configuration management block
    block:
      - name: get current cluster configuration metadata
        ydb_platform.ydb.cluster_config:
          ydb_bin: "{{ ydb_dir }}/bin/ydb"
          ld_library_path: "{{ ydb_dir }}/lib"
          ca_file: "{{ ydb_dir }}/certs/ca.crt"
          endpoint: "grpcs://{{ ydb_front | default(inventory_hostname) }}:2135"
          token: "{{ ydb_credentials.token }}"
          mode: fetch
        run_once: true
        become: true
        become_method: sudo
        become_user: ydb
        register: current_cluster_config
        until: current_cluster_config is succeeded
        retries: 30
        delay: 15

      - name: check if ydb_config is a map
        set_fact:
          ydb_config_is_map: "{{ ydb_config is mapping }}"
        run_once: true

      - name: handle ydb_config as map
        block:
          - name: parse ansible configuration from map
            set_fact:
              parsed_ansible_config: "{{ ydb_config }}"
            run_once: true
        when: ydb_config_is_map

      - name: handle ydb_config as file path
        block:
          - name: read ansible configuration file content
            slurp:
              src: "{{ ydb_config }}"
            run_once: true
            register: ansible_config_content
            delegate_to: localhost

          - name: parse ansible configuration content
            set_fact:
              parsed_ansible_config: "{{ ansible_config_content.content | b64decode | from_yaml }}"
            run_once: true
        when: not ydb_config_is_map

      - name: apply patch_config_v2 to configuration
        ydb_platform.ydb.patch_config:
          config: "{{ parsed_ansible_config }}"
          output_file: "{{ ydb_temp_config_path }}"
          hostvars: "{{ hostvars }}"
          ydb_disks: "{{ ydb_disks }}"
          groups: "{{ groups }}"
          ydb_dir: "{{ ydb_dir }}"
        run_once: true
        register: patched_config_result

      - name: set ownership of temporary file
        file:
          path: "{{ ydb_temp_config_path }}"
          owner: ydb
          group: ydb
        run_once: true
        become: true
        register: set_temp_ownership_result
        until: set_temp_ownership_result is succeeded
        retries: 5
        delay: 5

      - name: update configuration with selectors
        ydb_platform.ydb.apply_config_selectors:
          config: "{{ ydb_temp_config_path }}"
          output_file: "{{ ydb_temp_config_path }}"
          database_cores: "{{ ydb_database_node_cores | default(ydb_cores_dynamic) | default(omit) }}"
          storage_cores: "{{ ydb_storage_node_cores | default(ydb_cores_static) | default(omit) }}"
        become: true
        become_user: ydb
        run_once: true
        when: ydb_database_node_cores is defined or ydb_storage_node_cores is defined or ydb_cores_dynamic is defined or ydb_cores_static is defined
        register: selectors_result
        until: selectors_result is succeeded
        retries: 5
        delay: 5

      - name: update metadata in configuration
        ydb_platform.ydb.update_metadata:
          config: "{{ ydb_temp_config_path }}"
          output_file: "{{ ydb_temp_config_path }}"
          current_metadata: "{{ current_cluster_config.metadata }}"
        run_once: true
        become: true
        become_user: ydb
        register: v2_config_result
        until: v2_config_result is succeeded
        retries: 5
        delay: 5

      - name: update cluster configuration using YDB config management V2
        ydb_platform.ydb.cluster_config:
          ydb_bin: "{{ ydb_dir }}/bin/ydb"
          ld_library_path: "{{ ydb_dir }}/lib"
          ca_file: "{{ ydb_dir }}/certs/ca.crt"
          endpoint: "grpcs://{{ ydb_front | default(inventory_hostname) }}:2135"
          token: "{{ ydb_credentials.token }}"
          config_file: "{{ ydb_temp_config_path }}"
          mode: replace
        run_once: true
        become: true
        become_method: sudo
        become_user: ydb
        register: update_cluster_config_result
        until: update_cluster_config_result is succeeded
        retries: 30
        delay: 15

    always:
      - name: cleanup temporary config file
        file:
          path: "{{ ydb_temp_config_path }}"
          state: absent
        run_once: true
        become: true
        become_method: sudo
        become_user: ydb
        when: ydb_temp_config_path is defined

    when: ydb_config_v2 | default(false)
    tags:
      - storage
      - static
      - database
      - dynamic
      - no_restart

  - name: handle ydb_config for V1 configuration
    block:
      - name: check if ydb_config is a map
        set_fact:
          ydb_config_is_map: "{{ ydb_config is mapping }}"

      - name: copy configuration from map for V1
        copy:
          content: "{{ ydb_config | ydb_platform.ydb.custom_to_nice_yaml }}"
          dest: "{{ ydb_dir }}/cfg/ydbd-config.yaml"
          owner: ydb
          group: ydb
          mode: 0640
        when: ydb_config_is_map

      - name: copy configuration from file for V1
        copy:
          src: "{{ ydb_config }}"
          dest: "{{ ydb_dir }}/cfg/ydbd-config.yaml"
          owner: ydb
          group: ydb
          mode: 0640
        when: not ydb_config_is_map

    when: not ydb_config_v2 | default(false)
    tags:
      - storage
      - static
      - database
      - dynamic
      - no_restart

  - name: update static node configuration file (V1 configuration only)
    command: "{{ ydb_dir }}/home/update_config_file.sh ydbd-config.yaml ydbd-config-static.yaml STORAGE {{ ydb_storage_node_cores | default(ydb_cores_static, true) }}"
    changed_when: false
    when: not ydb_config_v2 | default(false)
    tags:
      - storage
      - static
      - no_restart
  - name: create dynamic node configuration file (V1 configuration only)
    command: "{{ ydb_dir }}/home/update_config_file.sh ydbd-config.yaml ydbd-config-dynamic.yaml COMPUTE {{ ydb_database_node_cores | default(ydb_cores_dynamic, true) }}"
    changed_when: false
    when: not ydb_config_v2 | default(false)
    tags:
      - database
      - dynamic
      - no_restart
- name: Restart YDB cluster (V1 configuration only)
  ansible.builtin.import_playbook: restart.yaml
  when: not ydb_config_v2 | default(false)
