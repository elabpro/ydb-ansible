- name: configure unconfigured packages
  when: ydb_dpkg_configure and ansible_os_family == 'Debian'
  block:
    - name: check dpkg audit
      shell: dpkg --audit
      register: dpkg_audit_result
      failed_when: dpkg_audit_result.rc not in [ 0, 1 ]
      changed_when: false

    - name: run the equivalent of "apt-get clean" as a separate step
      apt:
        clean: yes
      when: dpkg_audit_result.rc != 0

    - name: run the equivalent of "apt-get update" as a separate step
      apt:
        update_cache: yes
      when: dpkg_audit_result.rc != 0

    - name: fix unconfigured packages
      shell: dpkg --configure --pending
      when: dpkg_audit_result.rc != 0

- name: set vars_for_distribution_version variables
  ansible.builtin.include_vars:
    file: "{{ vars_for_distribution_version_file }}"
    name: vars_for_distribution_version

- name: setup apt repositories
  ansible.builtin.apt_repository:
    repo: "{{ item }}"
    state: present
    update_cache: no
  loop: "{{ vars_for_distribution_version.repositories }}"
  when: vars_for_distribution_version.repositories
  notify:
    - update apt cache

- name: setup apt preferences
  ansible.builtin.copy:
    content: "{{ item.content }}"
    dest: "{{ item.dest }}"
    force: true
  loop: "{{ vars_for_distribution_version.preferences }}"
  when: vars_for_distribution_version.preferences and ansible_os_family == 'Debian'
  notify:
    - update apt cache

- name: setup apt configs
  ansible.builtin.copy:
    content: "{{ item.content }}"
    dest: "{{ item.dest }}"
    force: true
  loop: "{{ vars_for_distribution_version.configs }}"
  when: vars_for_distribution_version.configs and ansible_os_family == 'Debian'
  notify:
    - update apt cache

- name: flush handlers
  meta: flush_handlers

- name: install packages
  ansible.builtin.package:
    pkg: "{{ vars_for_distribution_version.packages }}"
    state: present
  timeout: 900

