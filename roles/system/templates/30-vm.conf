# Tuning process of storing dirty pages to a storage
vm.dirty_ratio = 20
vm.dirty_writeback_centisecs = 6000

# This increase in virtual memory is required by apps. YDB consumes 
# lot of memory maps, hence a lower value can cause the system to 
# return out of memory errors when a process reaches the limit. 
vm.max_map_count = 1048576

# This value contains a flag that enables memory overcommitment.
# When this flag is 0, the kernel compares the userspace memory 
#   request size against total memory plus swap and rejects obvious overcommits.
# When this flag is 1, the kernel pretends there is always enough 
#   memory until it actually runs out.
# When this flag is 2, the kernel uses a “never overcommit” policy 
#   that attempts to prevent any overcommit of memory. Note that user_reserve_kbytes affects this policy.
# This feature can be very useful because there are a lot of programs that malloc() huge amounts of memory “just-in-case” and don’t use much of it.
# https://www.kernel.org/doc/html/latest/admin-guide/sysctl/vm.html
vm.overcommit_memory=1

# This enables or disables panic on out-of-memory feature.
# If this is set to 0, the kernel will kill some rogue process, 
# called oom_killer. Usually, oom_killer can kill rogue processes and system will survive.
vm.panic_on_oom=0

# This control is used to define the rough relative IO cost of 
# swapping and filesystem paging, as a value between 0 and 200. 
# At 100, the VM assumes equal IO cost and will thus apply memory 
# pressure to the page cache and swap-backed pages equally; 
# lower values signify more expensive swap IO, higher values indicates cheaper.
# At 0, the kernel will not initiate swap until the amount of 
# free and file-backed pages is less than the high watermark in a zone.
# SWAP MUST BE DISABLED AT ALL
vm.swappiness = 0

# This percentage value controls the tendency of the kernel to 
# reclaim the memory which is used for caching of directory and inode objects.
# At the default value of vfs_cache_pressure=100 the kernel will attempt to 
# reclaim dentries and inodes at a “fair” rate with respect to pagecache and 
# swapcache reclaim. Decreasing vfs_cache_pressure causes the kernel to prefer 
# to retain dentry and inode caches. When vfs_cache_pressure=0, the kernel will 
# never reclaim dentries and inodes due to memory pressure and this can easily 
# lead to out-of-memory conditions. Increasing vfs_cache_pressure beyond 100 
# causes the kernel to prefer to reclaim dentries and inodes.
# # Increasing vfs_cache_pressure significantly beyond 100 may have negative 
# performance impact. Reclaim code needs to take various locks to find freeable 
# directory and inode objects. With vfs_cache_pressure=1000, it will look for 
# ten times more freeable objects than there are.
vm.vfs_cache_pressure = 60
