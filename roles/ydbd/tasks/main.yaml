- name: check if required variables are defined
  ansible.builtin.assert:
    that:
      - "{{ item }} is defined"
    fail_msg: "{{ item }} variable is required"
  loop:
    - {ydb_archive | ydbd_binary}
    - ydb_config

- name: create certs group
  group:
    name: certs
    system: true

- name: create ydb group
  group:
    name: ydb
    system: true

- name: create ydb user
  user:
    name: ydb
    group: ydb
    groups: [disk, certs]
    system: true
    create_home: true
    home: "{{ ydb_dir }}/home"
    comment: "YDB Service Account"

- name: Create the Ansible remote_tmp for ydb user
  file:
    path: "{{ ydb_dir }}/home/.ansible/tmp"
    state: directory
    recurse: true
    group: ydb
    owner: ydb

- name: Add aliases in bashrc
  lineinfile:
    path: "{{ ydb_dir }}/home/.bashrc"
    line: "alias {{ item.alias }}=\"{{ item.cmd }}\""
    insertafter: EOF
    create: yes
    state: present
  with_items:
    - {alias: "ydb", cmd: "{{ ydb_dir }}/bin/ydb"}
    - {alias: "ydbd", cmd: "{{ ydb_dir }}/bin/ydbd"}

- name: Create the YDB release directory
  file: state=directory path={{ ydb_dir }}/release group=bin owner=root mode='0755'

- name: Create the YDB configuration directory
  file: state=directory path={{ ydb_dir }}/cfg group=bin owner=root mode='0755'

- name: Create the YDB audit base directory
  file: state=directory path={{ ydb_dir }}/audit group=ydb owner=ydb mode='0700'

- name: Create the YDB certs directory
  file: state=directory path={{ ydb_dir }}/certs group=ydb owner=ydb mode='0700'

- name: Create the YDB configuration backup directory
  file: state=directory path={{ ydb_dir }}/reserve group=ydb owner=ydb mode='0700'

- name: generate certificates
  when: ydb_tls_dir is not defined
  delegate_to: 127.0.0.1
  become: false
  block:
    - name: get current time
      run_once: true
      set_fact:
        current_time: "{{ lookup('pipe', 'date +%Y-%m-%d_%H-%M-%S') }}"
    - name: generate TLS certificates
      throttle: 1
      ydb_platform.ydb.gen_tls_certs:
        fqdn: "{{ inventory_hostname }}"
        folder: "{{ ansible_config_file | dirname }}/files/TLS"
        dest: "{{ current_time }}"
    - name: set ydb_tls_dir
      set_fact:
        ydb_tls_dir: "{{ ansible_config_file | dirname }}/files/TLS/certs/{{ current_time }}"

- name: setup certificates
  block:
    - name: copy the TLS ca.crt
      copy:
        src: "{{ ydb_tls_dir }}/ca.crt"
        dest: "{{ ydb_dir }}/certs/ca.crt"
        owner: root
        group: certs
        mode: 0440

    - name: copy the TLS node.crt
      copy:
        src: "{{ ydb_tls_dir }}/{{ inventory_hostname_short }}/node.crt"
        dest: "{{ ydb_dir }}/certs/node.crt"
        owner: root
        group: certs
        mode: 0440

    - name: copy the TLS node.key
      copy:
        src: "{{ ydb_tls_dir }}/{{ inventory_hostname_short }}/node.key"
        dest: "{{ ydb_dir }}/certs/node.key"
        owner: root
        group: certs
        mode: 0440

    - name: copy the TLS web.pem
      copy:
        src: "{{ ydb_tls_dir }}/{{ inventory_hostname_short }}/web.pem"
        dest: "{{ ydb_dir }}/certs/web.pem"
        owner: root
        group: certs
        mode: 0440

- name: copy configuration file
  copy:
    src: "{{ ydb_config }}"
    dest: "{{ ydb_dir }}/cfg/ydbd-config.yaml"
    owner: root
    group: ydb
    mode: 0440

- name: Add the configuration backup script
  template: src=backup_config.j2 dest={{ ydb_dir }}/home/backup_config.sh mode='755'

- name: add configuration file updater script
  template:
    src: update_config_file.sh
    dest: "{{ ydb_dir }}/home/update_config_file.sh"
    mode: 0755

- name: install ydbd
  ansible.builtin.import_role:
    name: ydb_platform.ydb.install_ydbd

# ydb_config_backup is passed via extra vars, generated as "date '+%Y-%m-%d_%H-%M-%S'"
- name: Backup the existing configuration files
  command: "{{ ydb_dir }}/home/backup_config.sh {{ ydb_config_backup }}"
  become: true
  become_user: root
  when: ydb_config_backup is defined
